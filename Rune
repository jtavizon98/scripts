#!/nfs/freenas/tuph/e18/project/compass/analysis/jtavizon/software/myenv/bin/python

import argparse
import os
import re
import subprocess
from datetime import datetime

import batchelor
from paths import paths

phast_dir = os.path.join(paths["mynas"], "software/phast")
ue_path = os.path.join(paths["mynas"], "user-events")
output_path = os.path.join(paths["momos"], "ROOT")
lst_path = os.path.join(ue_path, "lst")


# TODO: change phast_dir dynamically using which
def which(executable):
    try:
        result = subprocess.run(
            ["which", executable], capture_output=True, text=True, check=True
        )
        path = result.stdout.strip()
        return path
    except subprocess.CalledProcessError:
        return None


def getID(user_event_file):
    return user_event_file.split("-")[0][1:]


def get_description(user_event_file):
    return user_event_file.split("-")[1][:-3]


def get_run_number(file_path, data=True):
    if data:
        pattern = r"uDST_([0-9]+).*"
    else:
        pattern = r".*-r([0-9]+).*"
    match = re.search(pattern, file_path)
    if match:
        return match.group(1)
    return None


def create_symlink(user_event_file):
    symlink_path = os.path.join(phast_dir, "user", user_event_file)
    if not os.path.exists(symlink_path):
        subprocess.call(
            ["ln", "-s", os.path.join(ue_path, user_event_file), symlink_path]
        )
        print("Created symlink")
    else:
        print("symlink already exists")


def create_file_lists(user_event_id, directory, week=""):
    print(f"directory: {directory}")
    files = os.listdir(directory)
    files = [os.path.join(directory, f) for f in files]

    run_number_groups = {}
    for file_path in files:
        run_number = get_run_number(file_path)
        if run_number is not None:
            run_number_groups.setdefault(run_number, []).append(file_path)

    creation_counter = 0
    existing_counter = 0

    for i, (run_number, file_paths) in enumerate(run_number_groups.items()):
        output_file = os.path.join(
            lst_path, f"u{user_event_id}{week}-r{run_number}.lst"
        )
        if not os.path.exists(output_file):
            with open(output_file, "w") as f_out:
                for file_path in file_paths:
                    f_out.write(file_path + "\n")
            creation_counter += 1
        else:
            existing_counter += 1

    # for i, start_index in enumerate(range(0, len(files), num_files_per_list)):
    #     output_file = f"{lst_path}u{user_event_id}{week}_{i + 1}.lst"
    #     with open(output_file, "w") as f_out:
    #         end_index = start_index + num_files_per_list
    #         for file_path in files[start_index:end_index]:
    #             f_out.write(file_path + "\n")

    print(
        f"Lists: \t created = {creation_counter}\n\t existing = {existing_counter}\n\t TOTAL = {i+1}"
    )


def split_file(input_file, num_files_max=5):
    with open(input_file, "r") as f:
        lines = f.readlines()

    num_lines = len(lines)
    num_files = int((num_lines + num_files_max - 1) / num_files_max)

    for i in range(num_files):
        start = i * num_files_max
        end = (i + 1) * num_files_max
        file_name = f"{input_file[:-4]}_{i + 1}.lst"

        with open(file_name, "w") as f_out:
            f_out.writelines(lines[start:end])


def add_to_lists(user_event_id, list_path, directory: bool):
    list_files = []
    if directory:
        for file in os.listdir(list_path):
            file_name = os.path.basename(file)
            if file_name.startswith(f"u{user_event_id}"):
                list_files.append(file)
    else:
        pattern = re.compile(rf"u{user_event_id}.*_[0-9]*\.lst$")
        for file in os.listdir(list_path):
            file_name = os.path.basename(file)
            if bool(pattern.match(file_name)):
                list_files.append(file)
    return list_files


def recompile_phast(directory):
    os.chdir(directory)
    subprocess.call(["make"])


def run_phast_list(user_event_id, list_path, output_path):
    subprocess.call(
        [
            os.path.join(phast_dir, "phast"),
            "-u",
            user_event_id,
            "-l",
            list_path,
            "-h",
            output_path,
        ]
    )


def run_phast_batch(user_event_id, lists, output_path):
    config_file = os.path.join(paths["home"], ".batchelorrc_io")
    bh = batchelor.BatchelorHandler(configfile=config_file, check_job_success=True)
    bh.collectJobsIfPossible()
    log_path = os.path.join(output_path, ".log")
    for i, file in enumerate(lists):
        job_name = f"ue{user_event_id}_{i+1}"
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        log_file = os.path.join(log_path, f"{timestamp}_{job_name}.log")
        if not os.path.exists(log_file):
            with open(log_file, "w") as f:
                pass
        run = get_run_number(file, data=False)
        command = [
            "echo 'Start: ' $(date) && ",
            "echo 'Host: ' $(hostname) && ",
            "echo 'User: ' $(whoami) && ",
            "source scl_source enable python27 && ",
            ". prepare_root 6.24.06 && ",
            f"{phast_dir}phast -u {user_event_id} -l ",
            "echo 'End: '$(date)",
        ]
        output_file = os.path.join(output_path, f"u{user_event_id}-r{run}.root")
        command[5] += f"{os.path.join(lst_path, file)} -h {output_file} && "
        command = "".join(command)
        bh.submitJob(command, output=log_file, jobName=job_name)
    bh.submitCollectedJobsInArray(jobName=f"ue{user_event_id}")
    bh.wait()
    bh.checkJobStates()


def main():
    parser = argparse.ArgumentParser(
        description="Compile phast with new user story and run it"
    )

    parser.add_argument(
        "-b", "--batch", action="store_true", help="Compute using a cluster"
    )
    parser.add_argument(
        "-u",
        "--user_event_file",
        type=str,
        help="User event file (e.g. u<id>-description.cc)",
    )

    group = parser.add_mutually_exclusive_group()
    group.add_argument("-l", "--list_path", type=str, help="Path to the list file")
    group.add_argument(
        "-d", "--directory", type=str, help="Directory with data to be processed"
    )

    args = parser.parse_args()

    print("\n========================= Rune ===============================\n")
    # try:
    create_symlink(args.user_event_file)
    recompile_phast(phast_dir)

    # Extract user event id from the filename
    user_event_id = getID(args.user_event_file)
    user_event_description = get_description(args.user_event_file)

    output_file_start = f"{output_path}u{user_event_id}"

    lst_files = []
    if args.directory is not None:
        create_file_lists(user_event_id, paths["datadir"] + args.directory)
        lst_files += add_to_lists(user_event_id, lst_path, directory=True)
    if args.batch and args.list_path is not None:
        split_file(args.list_path)
        lst_files += add_to_lists(user_event_id, lst_path, directory=False)
    if args.directory is None and args.list_path is None:
        dirs = []
        for item in os.listdir(paths["datadir"]):
            if os.path.isdir(os.path.join(paths["datadir"], item)) and item.startswith(
                "2012_W"
            ):
                dirs.append(paths["datadir"] + item)
        # print(f"dirs: {dirs}")
        for d in dirs:
            dir_name = os.path.basename(d)
            create_file_lists(user_event_id, d, week=f"_{dir_name}")
        lst_files += add_to_lists(user_event_id, lst_path, directory=True)

    if args.batch:
        print("\n--> Rune BATCH MODE \n")
        run_phast_batch(user_event_id, lst_files, output_path)
    elif args.directory is not None:
        directory = paths["datadir"] + args.directory
        print("\n--> Rune DIRECTORY MODE \n")
        print(f"\tUser event: {user_event_id}\n\tDirectory: {directory}")
        for i, lst in enumerate(lst_files):
            output_file = output_file_start + f"-{i+1}.root"
            run_phast_list(user_event_id, lst, output_file)

    elif args.list_path is not None:
        print("\n--> Rune SINGLE MODE \n")
        lst_file = ue_path + args.list_path
        run_number = get_run_number(lst_file, data=False)
        if run_number is not None:
            output_file = output_file_start + f"-r{run_number}-single.root"
        else:
            output_file = output_file_start + f"-{user_event_description}.root"
        run_phast_list(user_event_id, lst_file, output_file)

    print(f"Ran user event {user_event_id}: {user_event_description}")
    print("\n========================= Rune ===============================\n")

    # except Exception as e:
    #     print("Error:", e)

    # finally:
    #     sys.exit()


if __name__ == "__main__":
    main()

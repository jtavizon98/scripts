#!/usr/bin/python

import argparse
import subprocess
import re
import os
import traceback


def run_command(command):
    """
    Helper function to run a shell command.
    """
    subprocess.check_call(command)


def main():
    # Set up argparse
    parser = argparse.ArgumentParser(
        description="Compile a LaTeX file with optional LuaLaTeX support."
    )
    parser.add_argument("file", help="Path to the .tex file to compile")
    parser.add_argument(
        "-l", "--lua", action="store_true", help="Use lualatex instead of pdflatex"
    )

    args = parser.parse_args()

    # Ensure the file is a .tex file
    if not re.match(r"[/a-zA-Z0-9._/-]*\.tex", args.file):
        raise NameError("File must be a .tex")

    # Get the directory and filename of the input .tex file
    tex_file = os.path.abspath(args.file)
    tex_dir = os.path.dirname(tex_file)
    tex_filename = os.path.basename(tex_file)
    base_filename = tex_filename.replace(".tex", "")

    # Set up the latex engine based on the --lua flag
    latex_engine = "lualatex" if args.lua else "pdflatex"

    try:
        # Change the working directory to the directory containing the .tex file
        os.chdir(tex_dir)

        # Initial cleanup
        log_file = f"{base_filename}.log"
        log_file_abs_path = os.path.join(tex_dir, log_file)
        if os.path.exists(log_file_abs_path):
            run_command(["latexmk", "-c", tex_filename])

        # Run the latex commands
        run_command(
            [latex_engine, "-shell-escape", "-interaction=nonstopmode", tex_filename]
        )
        run_command(["biber", "-nolog", base_filename])
        run_command(
            [latex_engine, "-shell-escape", "-interaction=nonstopmode", tex_filename]
        )
        run_command(
            [latex_engine, "-shell-escape", "-interaction=nonstopmode", tex_filename]
        )

        # Final cleanup
        run_command(["latexmk", "-c", tex_filename])

    except subprocess.CalledProcessError as e:
        # Catch subprocess errors and print detailed traceback and error info
        print(f"An error occurred while running: {' '.join(e.cmd)}")
        traceback.print_exc()


if __name__ == "__main__":
    main()
